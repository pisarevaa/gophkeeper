// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/service/keeper/types.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pisarevaa/gophkeeper/internal/shared/model"
)

// MockKeeperServicer is a mock of KeeperServicer interface.
type MockKeeperServicer struct {
	ctrl     *gomock.Controller
	recorder *MockKeeperServicerMockRecorder
}

// MockKeeperServicerMockRecorder is the mock recorder for MockKeeperServicer.
type MockKeeperServicerMockRecorder struct {
	mock *MockKeeperServicer
}

// NewMockKeeperServicer creates a new mock instance.
func NewMockKeeperServicer(ctrl *gomock.Controller) *MockKeeperServicer {
	mock := &MockKeeperServicer{ctrl: ctrl}
	mock.recorder = &MockKeeperServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeeperServicer) EXPECT() *MockKeeperServicerMockRecorder {
	return m.recorder
}

// AddBinaryData mocks base method.
func (m *MockKeeperServicer) AddBinaryData(ctx context.Context, file model.UploadedFile, name string, userID int64) (model.Keeper, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBinaryData", ctx, file, name, userID)
	ret0, _ := ret[0].(model.Keeper)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddBinaryData indicates an expected call of AddBinaryData.
func (mr *MockKeeperServicerMockRecorder) AddBinaryData(ctx, file, name, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBinaryData", reflect.TypeOf((*MockKeeperServicer)(nil).AddBinaryData), ctx, file, name, userID)
}

// AddTextData mocks base method.
func (m *MockKeeperServicer) AddTextData(ctx context.Context, name, textData string, userID int64) (model.Keeper, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTextData", ctx, name, textData, userID)
	ret0, _ := ret[0].(model.Keeper)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddTextData indicates an expected call of AddTextData.
func (mr *MockKeeperServicerMockRecorder) AddTextData(ctx, name, textData, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTextData", reflect.TypeOf((*MockKeeperServicer)(nil).AddTextData), ctx, name, textData, userID)
}

// DeleteData mocks base method.
func (m *MockKeeperServicer) DeleteData(ctx context.Context, userID, dataID int64) (model.Keeper, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", ctx, userID, dataID)
	ret0, _ := ret[0].(model.Keeper)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockKeeperServicerMockRecorder) DeleteData(ctx, userID, dataID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockKeeperServicer)(nil).DeleteData), ctx, userID, dataID)
}

// GetData mocks base method.
func (m *MockKeeperServicer) GetData(ctx context.Context, userID int64) ([]model.Keeper, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", ctx, userID)
	ret0, _ := ret[0].([]model.Keeper)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetData indicates an expected call of GetData.
func (mr *MockKeeperServicerMockRecorder) GetData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockKeeperServicer)(nil).GetData), ctx, userID)
}

// GetDataByID mocks base method.
func (m *MockKeeperServicer) GetDataByID(ctx context.Context, userID, dataID int64) (model.Keeper, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataByID", ctx, userID, dataID)
	ret0, _ := ret[0].(model.Keeper)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDataByID indicates an expected call of GetDataByID.
func (mr *MockKeeperServicerMockRecorder) GetDataByID(ctx, userID, dataID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataByID", reflect.TypeOf((*MockKeeperServicer)(nil).GetDataByID), ctx, userID, dataID)
}

// UpdateBinaryData mocks base method.
func (m *MockKeeperServicer) UpdateBinaryData(ctx context.Context, name string, file model.UploadedFile, userID, dataID int64) (model.Keeper, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBinaryData", ctx, name, file, userID, dataID)
	ret0, _ := ret[0].(model.Keeper)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateBinaryData indicates an expected call of UpdateBinaryData.
func (mr *MockKeeperServicerMockRecorder) UpdateBinaryData(ctx, name, file, userID, dataID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBinaryData", reflect.TypeOf((*MockKeeperServicer)(nil).UpdateBinaryData), ctx, name, file, userID, dataID)
}

// UpdateTextData mocks base method.
func (m *MockKeeperServicer) UpdateTextData(ctx context.Context, name, textData string, userID, dataID int64) (model.Keeper, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTextData", ctx, name, textData, userID, dataID)
	ret0, _ := ret[0].(model.Keeper)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateTextData indicates an expected call of UpdateTextData.
func (mr *MockKeeperServicerMockRecorder) UpdateTextData(ctx, name, textData, userID, dataID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTextData", reflect.TypeOf((*MockKeeperServicer)(nil).UpdateTextData), ctx, name, textData, userID, dataID)
}
