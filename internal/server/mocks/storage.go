// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/storage/db/types.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pisarevaa/gophkeeper/internal/shared/model"
)

// MockAuthStorage is a mock of AuthStorage interface.
type MockAuthStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAuthStorageMockRecorder
}

// MockAuthStorageMockRecorder is the mock recorder for MockAuthStorage.
type MockAuthStorageMockRecorder struct {
	mock *MockAuthStorage
}

// NewMockAuthStorage creates a new mock instance.
func NewMockAuthStorage(ctrl *gomock.Controller) *MockAuthStorage {
	mock := &MockAuthStorage{ctrl: ctrl}
	mock.recorder = &MockAuthStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthStorage) EXPECT() *MockAuthStorageMockRecorder {
	return m.recorder
}

// GetUserByEmail mocks base method.
func (m *MockAuthStorage) GetUserByEmail(ctx context.Context, email string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAuthStorageMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAuthStorage)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockAuthStorage) GetUserByID(ctx context.Context, userID int64) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthStorageMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthStorage)(nil).GetUserByID), ctx, userID)
}

// RegisterUser mocks base method.
func (m *MockAuthStorage) RegisterUser(ctx context.Context, email, passwordHash string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, email, passwordHash)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockAuthStorageMockRecorder) RegisterUser(ctx, email, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAuthStorage)(nil).RegisterUser), ctx, email, passwordHash)
}

// MockKeeperStorage is a mock of KeeperStorage interface.
type MockKeeperStorage struct {
	ctrl     *gomock.Controller
	recorder *MockKeeperStorageMockRecorder
}

// MockKeeperStorageMockRecorder is the mock recorder for MockKeeperStorage.
type MockKeeperStorageMockRecorder struct {
	mock *MockKeeperStorage
}

// NewMockKeeperStorage creates a new mock instance.
func NewMockKeeperStorage(ctrl *gomock.Controller) *MockKeeperStorage {
	mock := &MockKeeperStorage{ctrl: ctrl}
	mock.recorder = &MockKeeperStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeeperStorage) EXPECT() *MockKeeperStorageMockRecorder {
	return m.recorder
}

// AddData mocks base method.
func (m *MockKeeperStorage) AddData(ctx context.Context, keeper model.AddKeeper, userID int64) (model.Keeper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddData", ctx, keeper, userID)
	ret0, _ := ret[0].(model.Keeper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddData indicates an expected call of AddData.
func (mr *MockKeeperStorageMockRecorder) AddData(ctx, keeper, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddData", reflect.TypeOf((*MockKeeperStorage)(nil).AddData), ctx, keeper, userID)
}

// DeleteData mocks base method.
func (m *MockKeeperStorage) DeleteData(ctx context.Context, dataID int64) (model.Keeper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", ctx, dataID)
	ret0, _ := ret[0].(model.Keeper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockKeeperStorageMockRecorder) DeleteData(ctx, dataID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockKeeperStorage)(nil).DeleteData), ctx, dataID)
}

// GetDataByID mocks base method.
func (m *MockKeeperStorage) GetDataByID(ctx context.Context, dataID int64) (model.Keeper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataByID", ctx, dataID)
	ret0, _ := ret[0].(model.Keeper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataByID indicates an expected call of GetDataByID.
func (mr *MockKeeperStorageMockRecorder) GetDataByID(ctx, dataID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataByID", reflect.TypeOf((*MockKeeperStorage)(nil).GetDataByID), ctx, dataID)
}

// GetDataByUserID mocks base method.
func (m *MockKeeperStorage) GetDataByUserID(ctx context.Context, userID int64) ([]model.Keeper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataByUserID", ctx, userID)
	ret0, _ := ret[0].([]model.Keeper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataByUserID indicates an expected call of GetDataByUserID.
func (mr *MockKeeperStorageMockRecorder) GetDataByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataByUserID", reflect.TypeOf((*MockKeeperStorage)(nil).GetDataByUserID), ctx, userID)
}

// UpdateData mocks base method.
func (m *MockKeeperStorage) UpdateData(ctx context.Context, keeper model.AddKeeper, dataID int64) (model.Keeper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, keeper, dataID)
	ret0, _ := ret[0].(model.Keeper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockKeeperStorageMockRecorder) UpdateData(ctx, keeper, dataID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockKeeperStorage)(nil).UpdateData), ctx, keeper, dataID)
}
