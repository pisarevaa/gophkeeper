// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/storage/minio/types.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pisarevaa/gophkeeper/internal/server/model"
)

// MockMinioStorage is a mock of MinioStorage interface.
type MockMinioStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMinioStorageMockRecorder
}

// MockMinioStorageMockRecorder is the mock recorder for MockMinioStorage.
type MockMinioStorageMockRecorder struct {
	mock *MockMinioStorage
}

// NewMockMinioStorage creates a new mock instance.
func NewMockMinioStorage(ctrl *gomock.Controller) *MockMinioStorage {
	mock := &MockMinioStorage{ctrl: ctrl}
	mock.recorder = &MockMinioStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMinioStorage) EXPECT() *MockMinioStorageMockRecorder {
	return m.recorder
}

// CreateOne mocks base method.
func (m *MockMinioStorage) CreateOne(ctx context.Context, bucket string, file model.UploadedFile) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", ctx, bucket, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockMinioStorageMockRecorder) CreateOne(ctx, bucket, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockMinioStorage)(nil).CreateOne), ctx, bucket, file)
}

// DeleteOne mocks base method.
func (m *MockMinioStorage) DeleteOne(ctx context.Context, bucket, objectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", ctx, bucket, objectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockMinioStorageMockRecorder) DeleteOne(ctx, bucket, objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockMinioStorage)(nil).DeleteOne), ctx, bucket, objectID)
}

// GetMany mocks base method.
func (m *MockMinioStorage) GetMany(ctx context.Context, bucket string, objectID []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ctx, bucket, objectID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockMinioStorageMockRecorder) GetMany(ctx, bucket, objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockMinioStorage)(nil).GetMany), ctx, bucket, objectID)
}

// GetOne mocks base method.
func (m *MockMinioStorage) GetOne(ctx context.Context, bucket, objectID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", ctx, bucket, objectID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockMinioStorageMockRecorder) GetOne(ctx, bucket, objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockMinioStorage)(nil).GetOne), ctx, bucket, objectID)
}
